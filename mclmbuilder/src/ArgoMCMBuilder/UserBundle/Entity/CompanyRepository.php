<?php

namespace ArgoMCMBuilder\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CompanyRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository
{
    /**
     * get Companies list.
     *
     * @param data search $formData
     *
     * @return Companies list
     */
    public function searchCompany($formData)
    {
        $em = $this->getEntityManager();
        $companiesRepository = $em->getRepository('UserBundle:Company');
        $qb = $companiesRepository->createQueryBuilder('r');

        foreach ($formData as $field => $value) {
            if ($value != null) {
                $qb->andWhere("r.$field like :value_$field")->setParameter("value_$field", "%$value%");
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function findCompany($idCompany)
    {
        $subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
        $subQuery = $subQueryBuilder
            ->select(['c'])
            ->from('UserBundle:Company', 'c')
            ->where('c.id = :companyId')
            ->setParameter('companyId', $idCompany);

        return $subQuery;
    }

    public function findCompanyAndChild($idCompany, $userRoles = array())
    {
        $listId = $this->getAllChildrenRecursive($idCompany);
        $subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
        $subQuery = $subQueryBuilder
            ->select(['c'])
            ->from('UserBundle:Company', 'c');
        if (!in_array('ROLE_SUPER_ADMIN', $userRoles)) {
            $subQuery->where('c.id IN (:companyIds)')
                ->setParameter('companyIds', $listId);
        }

        return $subQuery;
    }

    public function findCompanyAndChildForList($idCompany)
    {
        $listId = $this->getAllChildrenRecursive($idCompany);
        $subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
        $qb = $subQueryBuilder
            ->select(['c'])
            ->from('UserBundle:Company', 'c')
            ->where('c.id IN (:companyIds)')
            ->setParameter('companyIds', $listId);

        return $qb->getQuery()->getResult();
    }

    public function findCompanyByProject($companyId)
    {
        $listId = $this->getAllChildrenRecursive($companyId);
        $subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
        $qb = $subQueryBuilder
            ->select(['c.id,c.name'])
            ->from('UserBundle:Company', 'c')
            ->where('c.id IN (:companyIds)')
            ->setParameter('companyIds', $listId);

        return $qb->getQuery()->getResult();
    }

    public function getAllChildrenRecursive($companyId)
    {
        $list = array();
        if (!empty($companyId)) {
            $list = $this->recursiveFindChild($companyId);
            foreach ($list as $child) {
                $ids = $this->getAllChildrenRecursive($child);
                $list = array_merge($list, $ids);
            }
        }
        $list[] = $companyId;

        return array_values(array_unique($list));
    }

    public function recursiveFindChild($companyId = null)
    {
        $data = array();
        $company = $this->getEntityManager()->getRepository('UserBundle:Company')->find($companyId);
        if ($company !== null) {
            foreach ($company->getChildren() as $child) {
                $data[] = $child->getId();
            }
        }


        return $data;
    }


}
