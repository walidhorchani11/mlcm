<?php

namespace ArgoMCMBuilder\MediaBundle\Repository;

use FOS\UserBundle\Model\User;

/**
 * PdfRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PdfRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User $user
     * @param int  $c
     * @param null $type
     * @param null $product
     *
     * @return array
     */
    public function getMediaByCompany($user, $c, $type = null, $product = null)
    {
        $em = $this->getEntityManager();
        $companyRep = $em->getRepository('UserBundle:Company');
        $listCompId = $companyRep->findCompanyAndChildForList($c);
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
            ->leftJoin('p.Company', 'company')
            ->where('company.id in (:idCompany)')
            ->setParameters(
                array(
                    'idCompany' => $listCompId,
                )
            );
        if ($type != null) {
            if ($type == 'mymedia') {
                $qb
                    ->andWhere('p.owner = :owner')
                    ->setParameter('owner', $user->getId());
            } else {
                $qb
                    ->andWhere('p.contentType LIKE :type')
                    ->setParameter('type', $type);
            }
        }
        if ($product != null) {
            //$qb
            //->join('', 'presentation')
            //->setParameter('type', $type);
        }
        $preparedQuery = $qb->getQuery();

        return $preparedQuery->getResult();
    }

    /**
     * @param string $label
     * @param User   $user
     * @param string $c
     *
     * @return array
     */
    public function findMediaBylabel($label, $user, $c)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
            ->andWhere('p.owner = :owner')
            ->orWhere('p.flag = :flag')
            ->andWhere('p.Company = :idCompany')
            ->andWhere('p.labelMedia LIKE :labelmedia or p.title LIKE :labelmedia')
            ->setParameters(
                array(
                    'idCompany' => $c,
                    'owner' => $user->getId(),
                    'flag' => 20,
                    'labelmedia' => '%'.$label.'%',
                )
            );
        $preparedQuery = $qb->getQuery();

        return $preparedQuery->getResult();
    }

    /**
     * @param int    $idCompany
     * @param string $mediaType
     *
     * @return array
     */
    public function findByMediaByCompanyId($idCompany, $mediaType)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->select('m.id, m.labelMedia,m.thumbUrl as path, comp.id as compId')
            ->join('m.Company', 'comp')
            ->where('m.contentType = :mediaType')
            ->andWhere('comp.id = :idComp')
            ->setParameters(
                array(
                    'mediaType' => $mediaType,
                    'idComp' => $idCompany,
                )
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User   $user
     * @param string $c
     *
     * @return array
     */
    public function getMediaEditor($user, $c, $idRev = null)
    {
        $em = $this->getEntityManager();
        $companyRep = $em->getRepository('UserBundle:Company');
        $listCompId = $companyRep->findCompanyAndChildForList($c);
        $qb = $this->createQueryBuilder('p')
            ->select(
                'p.id,p.url,p.labelMedia,p.height,p.width,p.size,p.inline,p.thumbUrl,p.contentType,p.master,p.shared,
                p.title,p.legend,p.flag,p.created'
            )
            //->leftJoin('p.revisionPdf', 'rev')
            ->leftJoin('p.Company', 'company')
            ->where('company.id in (:idCompany)')
            //->orWhere('p.flag = :flag and p.Company = :idCompany')
            //->orWhere('p.flag = :flag2 and rev.id = :idRev')
            ->setParameters(
                array(
                    'idCompany' => $listCompId,
//                    'owner' => $user->getId(),
//                    'flag' => 10,
//                    'flag2' => 20,
//                    'idRev' => $idRev,
                )
            )
            ->orderBy('p.id', 'DESC');
        $qb->distinct();
        $preparedQuery = $qb->getQuery();

        return $preparedQuery->getResult();
    }

    /**
     * @param int[] $ids
     *
     * @return array
     */
    public function findManyById($ids): array
    {
        $qb = $this->createQueryBuilder('pdf');
        $qb->select('pdf')
            ->where(
                $qb->expr()->in('pdf.id', $ids)
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param int $idRev
     * @return mixed
     */
    public function countSizeForPDFByRevision($idRev)
    {
        return $this->createQueryBuilder('pdf')
            ->leftJoin('pdf.revisionPdf', 'rev')
            ->where('rev.id = :idRev')
            ->setParameter('idRev', $idRev)
            ->select('SUM(pdf.size)')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
