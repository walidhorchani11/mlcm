<?php

namespace ArgoMCMBuilder\BackOfficeBundle\Entity\Repository;

use Doctrine\ORM\Query\Expr;

/**
 * NewsletterRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsletterRepository extends \Doctrine\ORM\EntityRepository
{
    /**
   * @param array $request
   *
   * @return array
   */
  public function ajaxTable($request)
  {
      $qb = $this->createQueryBuilder('p')->select('p.id, p.subject, p.textMessage');

      $total = $this->createQueryBuilder('p')->select('count(p.id)');

      $FilteredTotal = clone $total;
      if (isset($request['start']) and $request['start'] != null) {
          $qb->setFirstResult((int) $request['start']);
      }

      if (isset($request['length']) and $request['length'] != null) {
          $qb->setMaxResults((int) $request['length']);
      }

      if (isset($request['order'])) {
          foreach ($request['order'] as $order) {
              $qb->addOrderBy('p.'.$request['columns'][$order['column']]['data'], $order['dir']);
          }
      }

      if (isset($request['columns']) and isset($request['search']) and $request['search']['value'] != '') {
          $search = array();
          foreach ($request['columns'] as $column) {
              if ($column['searchable'] == 'true') {
                  $search[] = $qb->expr()->like('p.'.$column['data'], '\'%'.$request['search']['value'].'%\'');
              }
          }
          $qb->andWhere(new Expr\Orx($search));
          $FilteredTotal->andWhere(new Expr\Orx($search));
      }
      $output = array(
      'request' => $request,
      'draw' => $request['draw'],
      'recordsTotal' => $total->getQuery()->getSingleScalarResult(),
      'recordsFiltered' => $FilteredTotal->getQuery()->getSingleScalarResult(),
      'data' => $qb->getQuery()->getResult(),
    );

      return $output;
  }
}
