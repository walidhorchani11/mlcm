<?php

namespace ArgoMCMBuilder\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('id' => 'ASC'));
    }

    /**
     * get users list.
     *
     * @param data search $formData
     *
     * @return users list
     */
    public function searchUsers($formData)
    {
        $em = $this->getEntityManager();
        $usersRepository = $em->getRepository('UserBundle:User');
        $qb = $usersRepository->createQueryBuilder('r');

        foreach ($formData as $field => $value) {
            if ($value != null) {
                if ($field == 'roles') {
                    $qb->andWhere(":value_$field LIKE r.roles")->setParameter("value_$field", '%"'.$value.'"%');
                } else {
                    $qb->andWhere("r.$field = :value_$field")->setParameter("value_$field", $value);
                }
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function getListUserByCompany($companyId, $role = 'ROLE_SUPER_ADMIN')
    {
        $em = $this->getEntityManager();
        $companyRep = $em->getRepository('UserBundle:Company');
        $listCompId = $companyRep->getAllChildrenRecursive($companyId);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('u')
            ->from('UserBundle:User', 'u')
            ->innerJoin('u.company', 'cp')
            ->where('cp.id IN (:companyIds)')
            ->andWhere('u.roles NOT LIKE :role')
            ->setParameters(array('role' => '%'.$role.'%', 'companyIds' => $listCompId));

        return $query;
    }

    public function getListUserOwnerShip($companyId, $userId)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('u')
            ->from('UserBundle:User', 'u')
            ->where('u.company = :companyId')
            ->andWhere('u.roles LIKE :role or u.roles LIKE :secondRole or u.roles LIKE :thirdRole')
            ->andWhere('u.id != :userId')
            ->setParameters(
                array(
                    'role' => '%ROLE_ADMIN%',
                    'secondRole' => '%ROLE_MANAGER%',
                    'thirdRole' => '%ROLE_BASIC_USER%',
                    'companyId' => $companyId,
                    'userId' => $userId,
                )
            );

        return $query->getQuery()->getResult();
    }

    public function findPresentation($companyId, $presentationId)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select('u')
            ->from('UserBundle:User', 'u')
            ->leftJoin('PresentationBundle:PresentationUser', 'pu')
            ->where('pu.user = u.id')
            ->andWhere('pu.presentation = :presentationId')
            ->where('u.company = :companyId')
            ->setParameters(
                array(
                    'companyId' => $companyId,
                    //'presentationId' => $presentationId
                )
            );

        return $query->getQuery()->getResult();
    }

    public function findByCompanyAndRole($companyId, $role = null, $secondRole = null, $thirdRole = null, $currentUser = null)
    {
        $subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
        $subQuery = $subQueryBuilder
            ->select(['u'])
            ->from('UserBundle:User', 'u')
            ->where('u.company = :companyId');
        if ($thirdRole != null) {
            $subQueryBuilder->andWhere('u.roles LIKE :role or u.roles LIKE :secondRole or u.roles LIKE :thirdRole')
                ->setParameters(
                    array(
                        'role' => '%'.$role.'%',
                        'secondRole' => '%'.$secondRole.'%',
                        'thirdRole' => '%'.$thirdRole.'%',
                        'companyId' => $companyId,
                    )
                );
        } elseif ($secondRole != null) {
            $subQueryBuilder->andWhere('u.roles LIKE :role or u.roles LIKE :secondRole')
                ->setParameters(
                    array('role' => '%'.$role.'%', 'secondRole' => '%'.$secondRole.'%', 'companyId' => $companyId)
                );
        } elseif ($role != null) {
            $subQueryBuilder->andWhere('u.roles LIKE :role')
                ->setParameters(array('role' => '%'.$role.'%', 'companyId' => $companyId));
        } else {
            $subQueryBuilder->setParameter('companyId', $companyId);
        }
        if ($currentUser) {
            $subQueryBuilder->orWhere('u.id = :idCurrent')
                 ->setParameter('idCurrent', $currentUser);
        }

        return $subQuery;
    }

    public function findUsersByRoleAndCompany($companyId, $role)
    {
        $query = $this->createQueryBuilder('u')
            ->select(['u.id, u.firstname, u.lastname'])
            ->where('u.company = :companyId')
            ->setParameter('companyId', $companyId)
            ->andWhere('u.roles LIKE :role')
            ->setParameter('role', '%'.$role.'%');

        return $query->getQuery()->getResult();
    }

    /**
     * @param int    $company
     * @param int    $olduser
     * @param string $value
     *
     * @return array
     */
    public function findUserCompanyByNameOrEmail($company, $olduser, $value)
    {
        $query = $this->getEntityManager()->createQuery(
            "SELECT u.id, u.firstname, u.lastname, u.email, u.roles 
                FROM UserBundle:User u 
                WHERE u.id != :olduser 
                    AND ( u.roles !LIKE :role AND u.company = :company 
                    AND ( u.email LIKE :email or CONCAT(u.firstname, ' ', u.lastname) LIKE :name ))"
        )->setParameters(
            array(
                'role' => '%ROLE_SUPER_ADMIN%',
                'email' => '%'.$value.'%',
                'olduser' => $olduser,
                'name' => '%'.$value.'%',
                'company' => $company,
            )
        );

        return $query->getResult();
    }

    /**
     * @param int $oldUser
     * @param int $newUser
     */
    public function transfertUserRolePresentation($oldUser, $newUser, $idPresentation = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $presentation = $qb->update('PresentationBundle:Presentation', 'p')
            ->set('p.owner', ':newuser')
            ->where('p.owner = :olduser')
            ->setParameter('newuser', $newUser)
            ->setParameter('olduser', $oldUser);
        if ($idPresentation) {
            $presentation->andWhere('p.id = :id')
                ->setParameter('id', $idPresentation);
        }

        $presentation->getQuery()->execute();
    }

    /**
     * @param int $oldUser
     * @param int $newUser
     */
    public function transfertUserRoleProject($oldUser, $newUser, $idProject = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $project = $qb->update('ProjectBundle:Project', 'p')
            ->set('p.owner', ':newuser')
            ->where('p.owner = :olduser')
            ->setParameter('newuser', $newUser)
            ->setParameter('olduser', $oldUser);
        if ($idProject) {
            $project->andWhere('p.id = :id')
                ->setParameter('id', $idProject);
        }

        $project->getQuery()->execute();
    }
}
